<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《高效演讲：斯坦福最受欢迎的沟通课》读书笔记</title>
      <link href="/article/35a56429.html"/>
      <url>/article/35a56429.html</url>
      
        <content type="html"><![CDATA[<p>作者是沟通专家彼得·迈尔斯，在美国斯坦福大学专门开设了提高沟通能力的课程。同时，他还是一名沟通顾问，为政治家、企业高管做一对一的演讲培训，可以说是演讲领域的顶级专家。 免费从顶级沟通专家学演讲，这是互联网时代的馈赠。</p><a id="more"></a><p>全书分为三大部分，同时也是一场好的演讲的核心三要素：</p><blockquote><ol><li>演讲的内容</li><li>演讲的风格</li><li>演讲的状态</li></ol></blockquote><h3 id="1-演讲的内容"><a href="#1-演讲的内容" class="headerlink" title="1.演讲的内容"></a>1.演讲的内容</h3><p>一段讲话无非由三个部分构成，开头、中间和结尾，作者另用三个词——设立坡道、设置要点和给点甜点来展开说明。</p><h4 id="设立坡道"><a href="#设立坡道" class="headerlink" title="设立坡道"></a>设立坡道</h4><p>首先，<strong>在开始演讲的7秒内，你就要讲清楚演讲的目的</strong>，即“7秒原则”。听众没这么多时间听你长篇大论，他们要的是干货！所以在一开始就要把演讲目的亮出来，给听众一个明确的预期。</p><p>但是，一开始的时候不要讲得太嗨，演讲需要慢慢达到高潮，这样最后才有升华的空间，根据人的心理和记忆特征，演讲“低开高走”的效果是最好的，“头重脚轻”是演讲的忌讳。</p><h4 id="发现要点"><a href="#发现要点" class="headerlink" title="发现要点"></a>发现要点</h4><p>设立要点是用来联系听众的，而且只设置三条要点，如果在起草演讲大纲时发现你不能在三条要点中把你想要表达的讲出来的话，需要重新思考演讲内容，保证三条。</p><p>此外，每条要点都要有案例支撑，你要想办法让听众自己通过你讲的案例主动发现你想要表达的要点。不要提醒听众你的要点是什么，要让听众自己去发掘。演讲的目的是让听众接受你想要表达的内容，但要实现好的效果，要让听众愿意去倾听你演讲的内容与主动发掘你演讲的要点，而非灌输。</p><h4 id="给点甜头"><a href="#给点甜头" class="headerlink" title="给点甜头"></a>给点甜头</h4><p>人类的注意力持续性不高，整个演讲容易觉得冗长，所以在演讲稍后的时候需要鼓励听众，与听众互动，让听众感受到你了解他们，与他们始终在一起，这样可以引发共鸣。</p><p>最后需要把你的话题总结一遍，帮助听众梳理你讲过的内容，并作内容上的升华。</p><p>以上就是完整的内容架构，这种内容架构是一是取自大量大师级演讲者的多年经验，二是符合人类脑科学和心理学的研究结果，是靠谱的、有说服力的、普适的演讲内容架构，你的演讲内容按照这个架构组织准不会错。</p><blockquote><p>“想要说服别人接受你的观点，你说的话一定要有一个框架结构。有了这个结构，整体的说服效果就有了一个基本保证，不管你遇到什么情况，只要变换里面的内容就可以了。”</p></blockquote><h3 id="2-演讲的风格"><a href="#2-演讲的风格" class="headerlink" title="2.演讲的风格"></a>2.演讲的风格</h3><p>演讲风格分为三块，声音、姿势和表情。 </p><h4 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h4><p>不要为自己的声音自卑而不敢讲话，每个人的声音都有其独特性，而历史上最牛的演讲家以前几乎都是有口吃的，比如林肯、富兰克林、胡佛、杰克·韦尔奇等。其次，好的声音的重要性不如流利的表达，况且声音也是可以练的，流利的表达也是练出来的。</p><p>在练习声音的时候，学会腹式呼吸，这种呼吸方式在吸气的时候肚子是鼓起来的，气息会更足，说话会更具有穿透力。可以把自己的声音想象成一个音乐播放器，去练习有意识地调节音量、音调和节奏。如果声音不够好，后天一项一项地练，好的声音是可以练出来的。</p><h4 id="姿势"><a href="#姿势" class="headerlink" title="姿势"></a>姿势</h4><p>在演讲的时候，肢体能少动就少动，平时对着镜子练，把不必要的动作全都去掉。演讲者要将注意力放在演讲的内容上，听众也是。</p><h4 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h4><p>台下听众能够看到你的每一个表情，沉闷的表情会给听众消极的感觉，你需要作出更多积极的表情。眉毛要尽量上扬，要发自内心地笑，这样听众会感觉你是个积极乐观的人。</p><p>你的目光一定要看向听众，一次只盯着一个区域的一个听众，讲完一段话，跳到另外一个区域，再找一个听众盯着他讲，那个区域的所有的听众都会觉得你在看着他们，这样你的听众全都能被陆续照顾到。不要眼睛来回扫视。</p><h3 id="3-演讲的状态"><a href="#3-演讲的状态" class="headerlink" title="3.演讲的状态"></a>3.演讲的状态</h3><p>演讲的状态，是指你演讲时有什么样的情绪，听众就能感受到什么，因为听众可以从你的身上投射出自己的情绪。</p><p>状态由身体、视角和信念三个元素构成。</p><h4 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h4><p>让自己的情绪保持饱满有两个技巧。一是上台前做一做运动，提高身体兴奋性和调动脸部肌肉，让表情更加积极和自然。二是像演员学习。我们普通人都是<strong>情绪控制身体</strong>，是先有情绪后有身体的变化，例如自信的时候昂首挺胸，悲伤的时候脸下垂、头下低。而演员要随时进入对应情绪状态，导演不会等啊，他们的技巧是<strong>用身体控制情绪</strong>，如果要进入开心的情绪，就先作出开心状态的身体变化，包括表情、肢体等，带动情绪变为开心。不断练习后，你就能够对自身情绪状态有着非常好的掌控力。</p><h4 id="视角"><a href="#视角" class="headerlink" title="视角"></a>视角</h4><p>演讲者者需要关注悲伤的现实里发掘积极的事情，给人积极的正面的暗示。</p><h4 id="信念"><a href="#信念" class="headerlink" title="信念"></a>信念</h4><p>这是最重要的一条——自信。</p><p>要坚信你的讲话是有价值的、听众是真诚地在听你讲的每一句话的、你是在给听众送礼物，于是你会沉浸其中，你会富有热情，你会进入不断正面反馈的心流之中，整个过程自然而流畅。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方法 </tag>
            
            <tag> 演讲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《怎样解题》读书笔记</title>
      <link href="/article/ce3b3e2.html"/>
      <url>/article/ce3b3e2.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链投资日记（1）</title>
      <link href="/article/d6505d8b.html"/>
      <url>/article/d6505d8b.html</url>
      
        <content type="html"><![CDATA[<p>币市这周累计涨幅普遍高达百分之好几十，而在今天（8月2日）中午突然出现急促的较大回撤。回撤是意料之中的，但是如此猛烈（最高比例达到20%~30%，时间几分钟）却是让人震惊的。这次回撤后，我对我的持仓做了一点调整，而巴菲特老爷子投资前会经过“纸上的思考”，这能让人更加冷静和有根据，因此我也打算将我投资中的操作与思考写下来，系列名称定为《区块链投资日记》。</p><a id="more"></a><p>此次暴涨暴跌再次印证了没有永远上涨的投资标的，即便目前基本可以确定币市已经处于牛市，但也将会存在很多次洗盘，一段时间内累计涨幅过高，新资金进场速度更不上涨幅，币价就会发生调整。币市波动已经够猛烈了，那些加杠杆的人长期看几乎百分百爆仓，在最高点前仓位被爆实在非常可惜。正确的做法应该是：</p><blockquote><ol><li>投入金额不占总资产过高的比例，否则很容易睡不好而中途放弃</li><li>只投有价值支撑的、市值排名靠前的币种，否则动不动币价一蹶不振或归零</li><li>只拿现货不加杠杆不搞期货，否则容易在黎明前被爆</li><li>最好不要做空，做空的损失理论上可以是无限的</li></ol></blockquote><p>这次在高点我没有部分卖出是因为我以为还有几天的上涨，没想到调整是如此迅速而巨大。我意识到我仓位过重了，如果后期还有调整会影响心情，于是在已经发生调整的情况下仍卖出了20%的ETH和20%的BCH，这样即便后期再跌，我的心情会很好，后期如果上涨，我也仍然有很大的仓位。<strong>投资需要考虑人的心理。</strong></p><p>此外，我认为EOS目前基本处于停滞状态，没什么竞争力了，即便可能它也可以去蹭Defi的热度涨上一波，但EOS创始人BM高度不确定，我认为投资虽然可能有大的炒作空间但实际没什么竞争力且高度不确定的币种不是好的选择，我需要将有限的资金充分利用起来，兼顾涨幅与安全。于是我将EOS的部分仓位换成了XMR，因为它不仅高度去中心化，而且优秀的匿名性让它在暗网市场已经取代了BTC成为首选币种了，它的市值有实际应用的支撑，而且盘子不大，预计涨幅也会不错。</p><p>经过以上调整，我的仓位变为如下。</p><p><img src="https://cdn.jsdelivr.net/gh/lusuzi/CDN/images/invest1.png"></p><p>由于BTC的稳定性强，后期我可能不再对其进行调整了，EOS和XMR则会视情况手动调整，而ETH和BCH则打算以定投的形式将剩余资金投入，见高位就部分止盈以补充定投弹药，属于半自动操作。涨得过快止盈虽然不一定每次都成功，可能止盈后币价接着上涨，但止盈操作一是可以降低风险，减少收益的波动，二是这属于逆人性操作，起到帮助市场削峰填谷的作用，会得到市场的奖励，胜算率一般会高于50%。<br>对比我的原始投资额看，ETH只投入少部分，如今却因盈利占仓位的很大部分，而BCH投入很大比例，如今却因亏损而占小部分。</p><p><img src="https://cdn.jsdelivr.net/gh/lusuzi/CDN/images/invest2.png"></p><p>首先因为ETH处于市值第二的头部，会较快吸纳资金恢复大跌前的价格，果然，在市值排名最前的老币种中，ETH是继BTC第二个恢复大跌前水平的币种，其次又因为目前火爆的Defi大部分是基于ETH生态的，它当然也能蹭到热度。二者叠加，ETH涨幅很大。</p><p>但是，我目前仍然很看好BCH，它符合我对去中心化的点对点现金交易币种的理想形式。首先它相比BTC进行了适当的扩容，能够承载的用户数更多，同时手续费也低了很多，当牛市BTC拥堵时，它将能够分到很多从BTC溢出的“流量”。其次它足够去中心化，没有被单个人或公司控制，而且它的社区很活跃和开放，它的大户很多也是自由主义者和进化论者，坚信<strong>自由竞争，适者生存</strong>。即便目前走势不好，但是非常具有想象空间。<strong>先发优势逐渐会被竞争劣势所磨灭，而后起劣势可被竞争优势填补。</strong></p><p>后期我将减少关注币价信息，让剩余资金自动以每日固定额度慢慢流入即可。</p>]]></content>
      
      
      <categories>
          
          <category> 投资日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端到端加密聊天软件Signal</title>
      <link href="/article/b318b8fe.html"/>
      <url>/article/b318b8fe.html</url>
      
        <content type="html"><![CDATA[<p>这事需要先从微信讲起。</p><a id="more"></a><h3 id="微信的争议"><a href="#微信的争议" class="headerlink" title="微信的争议"></a>微信的争议</h3><p>2018年1月1日，吉利董事长李书福在珠海出席活动时吐槽微信称，“现在大家都非常的警觉，现在几乎这个人全都透明了，没有任何的隐私和信息的安全。你看我们的电话、微信，我心里在想，马化腾他肯定天天在看我们的微信，因为他都可以看的。” </p><p>一时网友炸开了锅，绝大多数中国人的日常交流都是使用的微信，如果遭到监控，是很可怕的事。对此腾讯在1月2日回应表示： </p><ol><li>微信不留存任何用户的聊天记录，聊天内容只存储在用户的手机、电脑等终端设备上;</li><li>微信不会将用户的任何聊天内容用于大数据分析;</li><li>因微信不存储、不分析用户聊天内容的技术模式，传言中所说“我们天天在看你的微信”纯属误解。</li></ol><p>但网友不买账，并顺手扔出了各种例子，表明微信保留聊天内容的行为是存在的。</p><p>事实上，各种主流通讯软件基本都默认使用端对端加密或提供端对端加密选项。端对端加密下通讯双方生成一个加密密钥，只有双方有能力解密，任何第三方甚至包括通讯服务器即使获取了聊天数据，也无法解密内容。而微信使用的是SSL加密，服务器还是能够查看，无法保证用户聊天信息的安全性。微信几乎成为中国人的生活必需品，理论上有保存用户大量隐私的可能性，却迟迟不推出加密功能，这实在令人匪夷所思。 </p><h3 id="Signal介绍"><a href="#Signal介绍" class="headerlink" title="Signal介绍"></a>Signal介绍</h3><p>既然微信不提供，自己可以使用替代软件。</p><p><a href="https://signal.org/">Signal</a>就是一款非常安全的端到端加密聊天软件。</p><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/lusuzi/CDN/images/B001.png"></p><p><img src="https://cdn.jsdelivr.net/gh/lusuzi/CDN/images/B002.png"></p>            </div><p>安全性上，斯诺登的代言足以保证。</p><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/lusuzi/CDN/images/B003.png"></p>            </div><p>方便性上，Signal可以直接使用电话号码快速注册，之后可以用它与另一注册了Signal的通讯录朋友免费发<strong>加密了的</strong>短信、打<strong>加密了的</strong>电话、发<strong>加密了的</strong>语音、发<strong>加密了的</strong>图片和进行<strong>加密了的</strong>视频聊天。</p><p>而且可以直接取代手机系统自带的短信APP，你在Signal可以既明文发送与接收运营商短信，又与已经注册了Signal的用户进行加密聊天，集成传统短信与网络聊天，非常方便。</p><p>我们与陌生人的交流完全可以仍然放在微信上，而与亲朋好友间的交通涉及的隐私较多，可以搬到Signal上。而且亲朋好友间一般互相在手机通讯录上保存了电话号码，双方注册了Signal后可以立即展开对话而不需要添加好友。</p><p>官网上安卓版需要使用Google Play下载，如果你的手机没有Google Play，可以在我这下载Signal的安装包（下载可能有点慢，请耐心等待）。</p><span class='btn center large'><a class="button" href='https://github.com/lusuzi/SignalApp/archive/4.67.3.zip' title='下载安装包'><i class='fas fa-download'></i>下载安装包</a></span>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 安全 </tag>
            
            <tag> 隐私 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比特币价格很有可能受Tether公司的USDT操控</title>
      <link href="/article/bee0f638.html"/>
      <url>/article/bee0f638.html</url>
      
        <content type="html"><![CDATA[<p>USDT是Tether公司推出的与美元(USD)挂钩的代币，价格基本稳定在1USDT=1美元上下波动，用户可以随时使用USDT与USD进行1:1兑换。Tether公司<strong>宣称</strong>（呵呵）严格遵守1:1的准备金，就是每发行1个USDT，它的银行账户都会有1美元的资金保障。但其审计报告是由它自己整理汇报给用户，而非独立的第三方发布，也就是说，Tether公司发行USDT是没有审计和监管的，在人性的驱使下，几乎必然存在暗箱操作的可能。</p><a id="more"></a><p>即便被怀疑滥发USDT、操纵BTC价格、审计不达标等，没人知道1USDT是否真有1美元的支撑，但长久以来，USDT几乎是区块链世界的“法币”，被广泛使用，使用者只能默许Tether的行为。</p><p>我在这想声明三点（并分析第三点）：</p><ol><li><p><strong>作为占稳定币绝大部分市值的USDT是区块链市场上最大的雷！</strong>持有USDT的用户需随时面临USDT崩盘的风险。</p></li><li><p>Tether与Bitfinex曾通过USDT操纵比特币价格的迹象非常明显。</p></li><li><p>Tether可能存在通过滥发USDT操纵比特币价格的可能。</p></li></ol><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/lusuzi/CDN/images/A001.png"></p>            </div><p>如图，2017年的大牛市可能就是USDT不断增发引起的，直到泡沫在顶点自然破裂，比特币价格一路狂泻。在狂泻之时，Tether公司又进行了一次大量增发，引起一波大反弹，但还是抑制不住下泄趋势。</p><p>时间来到2018年末，Tether突然减少USDT，导致在2018年已经趋于稳定的比特币再次狂泻，达到更低的3000美元左右。</p><p>比特币低位横盘几个月后，又增发USDT，导致比特币价格飞速上涨，当Tether不增发USDT不久后价格又趋于下跌，2020年1月的那次增发又导致其上涨，尔后遇到3月12日大崩。</p><p>在该次大崩后，其再次不断增发USDT使得比特币价格在短短几个月就上涨三倍以上，恢复了大跌前的水平。</p><p>比特币价格走势与Tether的USDT增发确实高度相关，尽管相关性不等于因果性，但其一我们要保持警惕，其二我们可以尝试利用它进行价格预测。</p><br><p>注：以上均为个人猜测，不构成任何投资建议。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一台电脑用多个Github部署多个Hexo博客</title>
      <link href="/article/8e989db0.html"/>
      <url>/article/8e989db0.html</url>
      
        <content type="html"><![CDATA[<p>如果需要在一台电脑部署多个Hexo博客，可以在同一个Github账号下创建多个Pages，但那样只有一个<code>用户名.github.io</code>这样的域名，其他的为子域名<code>用户名.github.io/xxx</code>。也可以多申请几个Github账号，每个账号建立一个Hexo博客，彼此独立。以下介绍如何实施后者。</p><a id="more"></a><p>SSH的公钥是GitHub作为本地仓库和远程仓库连接的唯一标识，一个公钥只能对应一个GitHub账户 ，如果在一台电脑上只生成一对密钥，而使用多个Github账号，那么在其上传代码时，Github无法辨识用户，导致数据交互失败。于是，需要在一台电脑上生成多对密钥，将不同的公钥上配置到不同的GitHub账号，即可解决该问题。</p><h3 id="一、生成SSH-key"><a href="#一、生成SSH-key" class="headerlink" title="一、生成SSH key"></a>一、生成SSH key</h3><p>假设已经有了一个Github账号A并配置了密钥，下面添加第二个Github账号B的密钥。</p><p>先回到根目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p>生成密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;账号B对应邮箱&quot;</span></span><br></pre></td></tr></table></figure><p> 回车后出现： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.  </span><br><span class="line"> Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (xxx/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>此时需要你输入新密钥的名称，千万要注意区别新密钥名称和旧密钥名称，不要相同，否则会覆盖旧密钥。之后再两次回车，新密钥即创建完成。 </p><h3 id="二、添加私钥"><a href="#二、添加私钥" class="headerlink" title="二、添加私钥"></a>二、添加私钥</h3><p>由于ssh-agent默认只识别公钥，因此要需要添加私钥。</p><p>先在<code>~/.ssh </code>目录下清除缓存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -D</span><br></pre></td></tr></table></figure><p>添加私钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">ssh-add ~/.ssh/新密钥名称</span><br></pre></td></tr></table></figure><p>若出现错误<code>Could not open a connection to your authentication agent.</code>，则需先执行命令<code>ssh-agent bash</code>，再执行以上命令。</p><h3 id="三、配置config文件"><a href="#三、配置config文件" class="headerlink" title="三、配置config文件"></a>三、配置config文件</h3><p>接着查看<code>~/.ssh/</code>路径下，有没有config文件（旧账号生成密钥时一般产生了），没有则创建一个config文件： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch config</span><br></pre></td></tr></table></figure><p>打开config，添加第二个账号的配置（如果是新生成的config则两个账号一起配置）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一个账号，默认使用的账号，不用做任何更改（如果没有则创建）</span></span><br><span class="line">Host github.com</span><br><span class="line"> HostName github.com</span><br><span class="line"> User 第一个用户名</span><br><span class="line"> IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个新账号，以任意的&quot;xxx&quot;为前缀，即对Host作了区分</span></span><br><span class="line">Host xxx.github.com</span><br><span class="line"> HostName github.com</span><br><span class="line"> User 第二个用户名</span><br><span class="line"> IdentityFile ~/.ssh/新密钥名称</span><br></pre></td></tr></table></figure><h3 id="四、部署与测试"><a href="#四、部署与测试" class="headerlink" title="四、部署与测试"></a>四、部署与测试</h3><p>将对应公钥添加至Github账号中，</p><p>远程测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh –T xxx.github.com</span><br></pre></td></tr></table></figure><p>出行以下信息说明配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi xxx! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>如果只作以上步骤，会发现给第二个账号用hexo-deploy-git时，显示的是第一个账号push的代码，因为第一个账号过去设置了全局用户名与邮箱配置，在<code>/.deploy_git/.git</code>本地默认采用作为全局的第一个账号。因此需要取消全局用户名/邮箱配置，在各<code>/.deploy_git/</code>本地单独设置用户名与邮箱。</p><h3 id="五、单独设置用户名与邮箱"><a href="#五、单独设置用户名与邮箱" class="headerlink" title="五、单独设置用户名与邮箱"></a>五、单独设置用户名与邮箱</h3><p>先取消全局用户名与邮箱配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure><p>分别进入各<code>/.deploy_git/</code>本地单独设置用户名与邮箱： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><h3 id="六、第二个账号使用方法"><a href="#六、第二个账号使用方法" class="headerlink" title="六、第二个账号使用方法"></a>六、第二个账号使用方法</h3><p>原来的用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com: 账号用户名/learngit.git</span><br></pre></td></tr></table></figure><p>现在的用法：</p><p>第一个账号由于Host没改，用法保持不变，第二个账号由于Host设置了别名，应如下使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@xxx.github.com: 账号用户名/learngit.git</span><br></pre></td></tr></table></figure><p>上面的<code>xxx</code>就是你之前设置的前缀。</p><p>于是，第二个Hexo博客目录下的_config.yml文件的deploy配置应该变化为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@xxx.github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这样两个账号的deploy就不会相互干扰。</p><br><p>多个账号递推，把前缀设置成不一样即可。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/article/4a17b156.html"/>
      <url>/article/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
