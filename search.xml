<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一台电脑用多个Github部署多个Hexo博客</title>
      <link href="/article/8e989db0.html"/>
      <url>/article/8e989db0.html</url>
      
        <content type="html"><![CDATA[<p>如果需要在一台电脑部署多个Hexo博客， 可以在同一个Github账号下创建多个Pages，但那样只有一个<code>用户名.github.io</code>这样的域名，其他的为子域名<code>用户名.github.io/xxx</code>。也可以多申请几个Github账号，每个账号建立一个Hexo博客，彼此独立。以下介绍如何实施后者。</p><a id="more"></a><p>SSH的公钥是GitHub作为本地仓库和远程仓库连接的唯一标识，一个公钥只能对应一个GitHub账户 ，如果在一台电脑上只生成一对密钥，而使用多个Github账号，那么在其上传代码时，Github无法辨识用户，导致数据交互失败。于是，需要在一台电脑上生成多对密钥，将不同的公钥上配置到不同的GitHub账号，即可解决该问题。</p><h3 id="一、生成SSH-key"><a href="#一、生成SSH-key" class="headerlink" title="一、生成SSH key"></a>一、生成SSH key</h3><p>假设已经有了一个Github账号A并配置了密钥，下面添加第二个Github账号B的密钥。</p><p>先回到根目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p>生成密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"账号B对应邮箱"</span></span><br></pre></td></tr></table></figure><p> 回车后出现： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.  </span><br><span class="line"> Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (xxx/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>此时需要你输入新密钥的名称，千万要注意区别新密钥名称和旧密钥名称，不要相同，否则会覆盖旧密钥。之后再两次回车，新密钥即创建完成。 </p><h3 id="二、添加私钥"><a href="#二、添加私钥" class="headerlink" title="二、添加私钥"></a>二、添加私钥</h3><p>由于ssh-agent默认只识别公钥，因此要需要添加私钥。</p><p>先在<code>~/.ssh</code>目录下星厨缓存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -D</span><br></pre></td></tr></table></figure><p>添加私钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">ssh-add ~/.ssh/新密钥名称</span><br></pre></td></tr></table></figure><p>若出现错误<code>Could not open a connection to your authentication agent.</code>，则需先执行命令<code>ssh-agent bash</code>，再执行以上命令。</p><h3 id="三、配置config文件"><a href="#三、配置config文件" class="headerlink" title="三、配置config文件"></a>三、配置config文件</h3><p>接着查看<code>~/.ssh/</code>路径下，有没有config文件（旧账号生成密钥时一般产生了），没有则创建一个config文件： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch config</span><br></pre></td></tr></table></figure><p>打开config，添加第二个账号的配置（如果是新生成的config则两个账号一起配置）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一个账号，默认使用的账号，不用做任何更改（如果没有则创建）</span></span><br><span class="line">Host github.com</span><br><span class="line"> HostName github.com</span><br><span class="line"> User 第一个用户名</span><br><span class="line"> IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个新账号，以任意的"xxx"为前缀，即对Host作了区分</span></span><br><span class="line">Host xxx.github.com</span><br><span class="line"> HostName github.com</span><br><span class="line"> User 第二个用户名</span><br><span class="line"> IdentityFile ~/.ssh/新密钥名称</span><br></pre></td></tr></table></figure><h3 id="四、部署与测试"><a href="#四、部署与测试" class="headerlink" title="四、部署与测试"></a>四、部署与测试</h3><p>将对应公钥添加至Github账号中，</p><p>远程测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh –T xxx.github.com</span><br></pre></td></tr></table></figure><p>出行以下信息说明配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi xxx! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>如果只作以上步骤，会发现给第二个账号用hexo-deploy-git时，显示的是第一个账号push的代码，因为第一个账号过去设置了全局用户名与邮箱配置，在<code>/.deploy_git/.git</code>本地默认采用作为全局的第一个账号。因此需要取消全局用户名/邮箱配置，在各<code>/.deploy_git/</code>本地单独设置用户名与邮箱。</p><h3 id="五、单独设置用户名与邮箱"><a href="#五、单独设置用户名与邮箱" class="headerlink" title="五、单独设置用户名与邮箱"></a>五、单独设置用户名与邮箱</h3><p>先取消全局用户名与邮箱配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure><p>分别进入各<code>/.deploy_git/</code>本地单独设置用户名与邮箱： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"用户名"</span></span><br><span class="line">git config user.email <span class="string">"邮箱"</span></span><br></pre></td></tr></table></figure><h3 id="六、第二个账号使用方法"><a href="#六、第二个账号使用方法" class="headerlink" title="六、第二个账号使用方法"></a>六、第二个账号使用方法</h3><p>原来的用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com: 账号用户名/learngit.git</span><br></pre></td></tr></table></figure><p>现在的用法：</p><p>第一个字账号保持不变，第二个账号由于Host设置了别名，故如下使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@xxx.github.com: 账号用户名/learngit.git</span><br></pre></td></tr></table></figure><p>上面的<code>xxx</code>就是你之前设置的前缀。</p><p>于是， 第二个博客Hexo目录下的_config.yml文件，找到deploy的配置应该变化为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@xxx.github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这样两个账号的deploy就不会相互干扰。</p><p>多个账号递推，把前缀设置成不一样即可。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/article/4a17b156.html"/>
      <url>/article/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external nofollow noopener noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external nofollow noopener noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external nofollow noopener noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external nofollow noopener noreferrer">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external nofollow noopener noreferrer">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external nofollow noopener noreferrer">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external nofollow noopener noreferrer">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="external nofollow noopener noreferrer">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
